{"version":3,"sources":["Board.jsx","Sidebar.jsx","App.jsx","index.js"],"names":["Board","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","canvasEle","ctx","colors","colorRGB","getContext","drawBoard","b","moves","length","a","centerX","centerY","beginPath","console","log","arc","Math","PI","color","fillStyle","fill","lineWidth","strokeStyle","stroke","numericBoard","bitmap","split","map","Number","decompressedBoard","i","j","k","push","board","decompressBitmap","imageData","getImageData","width","height","data","y","x","index","player","parseInt","gridColor","putImageData","_this2","react_default","createElement","ref","n","React","Component","Sidebar","rows","player_names","name","TableRow_default","key","selected","current_player","TableCell_default","player_scores","player_times","Typography_default","variant","gutterBottom","Table_default","TableHead_default","TableBody_default","timeTaken","App","state","reset","initiated","soft_reset","game_over","move_col","move_row","num_players","total_scores","last_scores","setState","clearInterval","clockInterval","names","tScores","scores","times","resetClock","socket","openSocket","on","gameState","JSON","parse","resetBoard","softReset","endGame","toConsumableArray","concat","init","_this3","arguments","undefined","clockStart","Date","getTime","setInterval","toFixed","Grid_default","container","spacing","item","xs","src_Sidebar","src_Board","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.13947ca1.chunk.js","sourcesContent":["import React from 'react';\n\nclass Board extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    canvasEle = null;\n    ctx = null;\n    colors = ['red', 'blue', 'green', 'orange', 'yellow', 'purple', 'silver', 'olive', 'teal'];\n    colorRGB = [\n        [255, 0, 0],\n        [0, 0, 255],\n        [0, 255, 0],\n        [255, 165, 0],\n        [255, 255, 0],\n        [128, 0, 128],\n        [192, 192, 192],\n        [128, 128, 0],\n        [0, 128, 128]\n    ];\n\n    componentDidMount() {\n        this.ctx = this.canvasEle.getContext('2d');\n        this.drawBoard();\n    }\n\n    drawStones() {\n        for (var b = 0; b < this.props.moves.length; b++) {\n            for (var a = 0; a < this.props.moves[b].length; a++) {\n                var centerX = this.props.moves[b][a][0];\n                var centerY = this.props.moves[b][a][1];\n                var radius = 10;\n\n                this.ctx.beginPath();\n                console.log(centerX, centerY);\n                this.ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n                var color = this.colors[b];\n                this.ctx.fillStyle = color;\n                this.ctx.fill();\n                this.ctx.lineWidth = 3;\n                this.ctx.strokeStyle = '#003300';\n                this.ctx.stroke();\n            }\n        }\n    }\n\n    decompressBitmap() {\n        const numericBoard = this.props.bitmap.split(\" \").map(Number);\n        const decompressedBoard = [];\n        let i = 0;\n        for (let j = 0; ; j += 3) {\n            for (let k = numericBoard[j]; k <= numericBoard[j + 1]; k++) {\n                decompressedBoard.push(numericBoard[j + 2]);\n            }\n            if (numericBoard[j + 1] === 999) {\n                i += 1\n                if (i === 1000) {\n                    break;\n                }\n            }\n        }\n        return decompressedBoard;\n    }\n\n    drawBoard() {\n        var board = this.decompressBitmap();\n\n        var imageData = this.ctx.getImageData(0, 0, this.props.width, this.props.height);\n        var data = imageData.data;\n\n        for (var y = 0; y < 1000; y++) {\n            for (var x = 0; x < 1000; x++) {\n                var index = (y * 1000 + x) * 4;\n\n                var player = parseInt(board[index / 4]);\n\n                if (player > 0) {\n                    var gridColor = this.colorRGB[player - 1];\n\n                    data[index] = gridColor[0];\n                    data[++index] = gridColor[1];\n                    data[++index] = gridColor[2];\n                    data[++index] = 125;\n                }\n            }\n        }\n        console.log(\"data:\", data);\n        this.ctx.putImageData(imageData, 0, 0);\n    }\n\n\n    render() {\n        return (\n            <canvas height={this.props.height} width={this.props.width} ref={(n) => this.canvasEle = n} />\n        );\n    }\n\n}\n\nexport default Board;","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\n\nclass Sidebar extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let rows;\n        if (!this.props.player_names) {\n            rows = <TableRow key={-1}>\n                <TableCell></TableCell>\n                <TableCell></TableCell>\n                <TableCell></TableCell>\n                <TableCell></TableCell>\n            </TableRow>\n        } else {\n            rows = this.props.player_names.map((name, i) => {\n                return (\n                    <TableRow key={i} selected={this.props.current_player == i + 1 ? true : false}>\n                        <TableCell>{i}</TableCell>\n                        <TableCell>{name}</TableCell>\n                        <TableCell>{this.props.player_scores[i]}</TableCell>\n                        <TableCell>{this.props.player_times[i]}</TableCell>\n                    </TableRow>\n                );\n            });\n        }\n\n        return (\n            <div>\n                <Typography variant=\"h4\" gutterBottom>\n                    Players\n                </Typography>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>#</TableCell>\n                            <TableCell>Player Name</TableCell>\n                            <TableCell>Current Score</TableCell>\n                            <TableCell>Time Left</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows}\n                    </TableBody>\n                </Table>\n                <Typography variant=\"h4\" gutterBottom>\n                    Current Move Time\n                </Typography>\n                {this.props.timeTaken}\n            </div>\n        );\n\n    }\n\n}\n\nexport default Sidebar;","import React, {\n  Component\n} from 'react';\nimport './App.css';\nimport Board from './Board';\nimport Sidebar from './Sidebar';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport openSocket from 'socket.io-client';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      reset: false,\n      initiated: false,\n      soft_reset: false,\n      game_over: false,\n      bitmap: \"\",\n      move_col: -1,\n      move_row: -1,\n      num_players: 0,\n      current_player: -1,\n      player_times: [],\n      player_scores: [],\n      moves: [],\n      total_scores: [],\n      last_scores: [],\n      timeTaken: 0\n    }\n  }\n\n  clockInterval;\n  clockStart;\n\n  resetBoard() {\n    this.setState({\n      initiated: false,\n      moves: [],\n      total_scores: [],\n      last_scores: [],\n      game_over: false\n    });\n  }\n\n  softReset() {\n    this.setState({\n      moves: [],\n      game_over: false\n    });\n  }\n\n  endGame() {\n    clearInterval(this.clockInterval);\n    this.setState({\n      game_over: true\n    });\n  }\n\n  init(names) {\n    let tScores = [];\n    let scores = [];\n    let times = [];\n    for (var i in names) {\n      tScores.push(0);\n      scores.push(0);\n      times.push(120.0);\n    }\n    console.log(names);\n    this.setState({\n      player_names: names,\n      total_scores: tScores,\n      player_scores: scores,\n      player_times: times,\n      initiated: true\n    });\n    this.resetClock(false);\n  }\n\n  componentDidMount() {\n    this.socket = openSocket('http://localhost:10000');\n    this.socket.on('to_client', (data) => {\n      const gameState = JSON.parse(data);\n      console.log(this.state);\n      if (gameState['reset']) {\n        this.resetBoard();\n      } else if (!this.state.initiated) {\n        this.init(gameState[\"player_names\"]);\n      } else if (gameState['soft-reset']) {\n        this.softReset();\n      } else if (gameState['game_over']) {\n        this.endGame();\n      } else {\n        this.setState({\n          current_player: gameState['current_player'],\n          player_scores: gameState['player_scores'],\n          player_times: gameState['player_times'],\n          bitmap: gameState['bitmap'],\n          moves: [...this.state.moves, gameState['move_row'], gameState['move_col']],\n          move_col: gameState['move_col'],\n          move_row: gameState['move_row']\n        });\n        this.resetClock(true);\n      }\n    });\n  }\n\n  resetClock(shouldClearInterval = false) {\n    if (shouldClearInterval) {\n      clearInterval(this.clockInterval);\n    }\n    this.clockStart = new Date().getTime();\n    this.clockInterval = setInterval(() => {\n      let timeTaken = new Date().getTime() - this.clockStart;\n      timeTaken /= 1000;\n      this.setState({ timeTaken: timeTaken.toFixed(2) });\n    }, 100);\n  }\n\n  render() {\n    return (\n      <div>\n        <Typography variant=\"h2\" gutterBottom>\n          Gravitational Voronoi\n        </Typography>\n        <Grid container spacing={24}>\n          <Grid item xs={2}>\n            <Sidebar\n              player_names={this.state.player_names}\n              player_scores={this.state.player_scores}\n              player_times={this.state.player_times}\n              current_player={this.state.current_player}\n              timeTaken={this.state.timeTaken}\n            />\n          </Grid>\n          <Grid item xs={10}>\n            <Board\n              height={600}\n              width={600}\n              bitmap={this.state.bitmap}\n              moves={this.state.moves}\n              num_players={this.state.num_players}\n            />\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render( < App / > , document.getElementById('root'));"],"sourceRoot":""}