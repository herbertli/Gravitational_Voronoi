{"version":3,"sources":["Board.jsx","Sidebar.jsx","Timer.jsx","Gameover.jsx","App.jsx","index.js"],"names":["Board","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","colors","colorRGB","canvas","React","createRef","_this$props","bitmap","moves","ctx","current","getContext","length","drawBoard","drawStones","b","a","centerX","centerY","beginPath","arc","Math","PI","color","fillStyle","fill","lineWidth","strokeStyle","stroke","board","boardData","numericBoard","split","map","Number","decompressedBoard","i","j","k","push","decompressBitmap","imageData","getImageData","data","y","x","index","player","parseInt","gridColor","putImageData","react_default","createElement","id","height","width","ref","Component","Sidebar","rows","_this2","classes","player_names","current_player","player_times","percentages","last_percentage","name","TableRow_default","key","selected","TableCell_default","style","background","concat","toFixed","className","root","Typography_default","variant","gutterBottom","textAlign","Table_default","padding","table","TableHead_default","TableBody_default","withStyles","theme","marginTop","spacing","unit","overflowX","minWidth","Timer","timer","minutes","floor","seconds","Fragment","Gameover","total_scores","App","clockInterval","setInterval","timeTaken","state","setState","in_lobby","game_over","num_players","player_scores","socket","openSocket","on","_this2$state","gameState","JSON","parse","reset","resetBoard","init","softReset","endGame","nMoves","toConsumableArray","move_col","move_row","nPercentages","totalRoundScore","forEach","singleScore","score","percentageRoundScore","names","pScores","pTimes","lScores","percent","_this$state","Grid_default","container","item","xs","src_Gameover","src_Sidebar","src_Timer","src_Board","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.833a200f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction decompressBitmap(boardData) {\n  const numericBoard = boardData.split(' ').map(Number);\n  const decompressedBoard = [];\n  let i = 0;\n  for (let j = 0; ; j += 3) {\n    for (let k = numericBoard[j]; k <= numericBoard[j + 1]; k += 1) {\n      decompressedBoard.push(numericBoard[j + 2]);\n    }\n    if (numericBoard[j + 1] === 999) {\n      i += 1;\n      if (i === 1000) {\n        break;\n      }\n    }\n  }\n  return decompressedBoard;\n}\n\nclass Board extends React.Component {\n  colors = ['red', 'blue', 'green', 'orange', 'yellow', 'purple', 'silver', 'olive', 'teal'];\n\n  colorRGB = [\n    [255, 0, 0],\n    [0, 0, 255],\n    [0, 255, 0],\n    [255, 165, 0],\n    [255, 255, 0],\n    [128, 0, 128],\n    [192, 192, 192],\n    [128, 128, 0],\n    [0, 128, 128],\n  ];\n\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n  }\n\n  componentDidUpdate() {\n    const { bitmap, moves } = this.props;\n    const ctx = this.canvas.current.getContext('2d');\n    if (!bitmap || bitmap === '' || moves.length === 0) {\n      return;\n    }\n    this.drawBoard(ctx, bitmap);\n    this.drawStones(ctx, moves);\n  }\n\n  drawStones(ctx, moves) {\n    for (let b = 0; b < moves.length; b += 1) {\n      for (let a = 0; a < moves[b].length; a += 1) {\n        const centerX = moves[b][a][0];\n        const centerY = moves[b][a][1];\n        const radius = 10;\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n        const color = this.colors[b];\n        ctx.fillStyle = color;\n        ctx.fill();\n        ctx.lineWidth = 3;\n        ctx.strokeStyle = '#003300';\n        ctx.stroke();\n      }\n    }\n  }\n\n  drawBoard(ctx, bitmap) {\n    const board = decompressBitmap(bitmap);\n    const imageData = ctx.getImageData(0, 0, 1000, 1000);\n    const { data } = imageData;\n    for (let y = 0; y < 1000; y += 1) {\n      for (let x = 0; x < 1000; x += 1) {\n        const index = (y * 1000 + x) * 4;\n        const player = parseInt(board[index / 4], 10);\n        if (player > 0) {\n          const gridColor = this.colorRGB[player - 1];\n          for (let i = 0; i < 3; i += 1) {\n            data[index + i] = gridColor[i];\n          }\n          data[index + 3] = 125;\n        }\n      }\n    }\n    ctx.putImageData(imageData, 0, 0);\n  }\n\n  render() {\n    return (\n      <canvas\n        id=\"canvas\"\n        height={1000}\n        width={1000}\n        ref={this.canvas}\n      />\n    );\n  }\n}\n\nBoard.propTypes = {\n  bitmap: PropTypes.string.isRequired,\n  moves: PropTypes.array.isRequired,\n};\n\nexport default Board;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing.unit * 3,\n    overflowX: 'auto',\n  },\n  table: {\n    minWidth: 700,\n  },\n});\n\nclass Sidebar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.colors = ['red', 'blue', 'green', 'orange', 'yellow', 'purple', 'silver', 'olive', 'teal'];\n    this.colorRGB = [\n      [255, 0, 0],\n      [0, 0, 255],\n      [0, 255, 0],\n      [255, 165, 0],\n      [255, 255, 0],\n      [128, 0, 128],\n      [192, 192, 192],\n      [128, 128, 0],\n      [0, 128, 128],\n    ];\n  }\n\n  render() {\n    const {\n      classes,\n      player_names,\n      current_player,\n      player_times,\n      percentages,\n      last_percentage,\n    } = this.props;\n\n    let rows;\n    if (!player_names || player_names.length === 0) {\n      rows = <TableRow key=\"noPlayers\" />;\n    } else {\n      rows = player_names.map((name, i) => (\n        <TableRow key={name} selected={current_player % player_names.length === i}>\n          <TableCell style={{ background: this.colors[i] }} />\n          <TableCell>{name}</TableCell>\n          <TableCell>{percentages[i]}</TableCell>\n          <TableCell>{last_percentage[i]}</TableCell>\n          <TableCell>{`${player_times[i].toFixed(1)}s`}</TableCell>\n        </TableRow>\n      ));\n    }\n\n    return (\n      <div className={classes.root}>\n        <Typography variant=\"h5\" gutterBottom style={{ textAlign: 'center' }}>\n          Players in Lobby\n        </Typography>\n        <Table padding=\"dense\" className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell>#</TableCell>\n              <TableCell>Player Name</TableCell>\n              <TableCell>Current Score</TableCell>\n              <TableCell>Last Score</TableCell>\n              <TableCell>Time Left</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows}\n          </TableBody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nSidebar.propTypes = {\n  classes: PropTypes.object.isRequired,\n  player_names: PropTypes.array.isRequired,\n  current_player: PropTypes.number.isRequired,\n  player_times: PropTypes.array.isRequired,\n  percentages: PropTypes.array.isRequired,\n  last_percentage: PropTypes.array.isRequired,\n};\n\nexport default withStyles(styles)(Sidebar);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\n\nconst Timer = (props) => {\n  const { timer } = props;\n  const minutes = Math.floor(timer / 60);\n  const seconds = timer % 60;\n  return (\n    <React.Fragment>\n      <Typography variant=\"h5\" gutterBottom style={{ textAlign: 'center' }}>\n          Move Timer (estimated):\n      </Typography>\n      <Typography variant=\"display1\" gutterBottom style={{ textAlign: 'center' }}>\n        {minutes}\n        :\n        {seconds < 10 ? '0' : ''}\n        {seconds}\n      </Typography>\n    </React.Fragment>\n  );\n};\n\nTimer.propTypes = {\n  timer: PropTypes.number.isRequired,\n};\n\nexport default Timer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\n\nclass Gameover extends React.Component {\n  constructor(props) {\n    super(props);\n    this.colors = ['red', 'blue', 'green', 'orange', 'yellow', 'purple', 'silver', 'olive', 'teal'];\n    this.colorRGB = [\n      [255, 0, 0],\n      [0, 0, 255],\n      [0, 255, 0],\n      [255, 165, 0],\n      [255, 255, 0],\n      [128, 0, 128],\n      [192, 192, 192],\n      [128, 128, 0],\n      [0, 128, 128],\n    ];\n  }\n\n  render() {\n    const {\n      player_names,\n      total_scores,\n    } = this.props;\n    const rows = player_names.map((name, i) => (\n      <TableRow key={name}>\n        <TableCell style={{ background: this.colors[i] }} />\n        <TableCell>{name}</TableCell>\n        <TableCell>{total_scores[i]}</TableCell>\n      </TableRow>\n    ));\n\n    return (\n      <div>\n        <Typography variant=\"h5\" gutterBottom style={{ textAlign: 'center' }}>\n          Game Over!\n          <br />\n          Final Scores:\n        </Typography>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>#</TableCell>\n              <TableCell>Player Name</TableCell>\n              <TableCell>Total Score</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows}\n          </TableBody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nGameover.propTypes = {\n  player_names: PropTypes.arrayOf(PropTypes.string).isRequired,\n  total_scores: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n\nexport default Gameover;\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport openSocket from 'socket.io-client';\nimport './App.css';\nimport Board from './Board';\nimport Sidebar from './Sidebar';\nimport Timer from './Timer';\nimport Gameover from './Gameover';\n\nclass App extends React.Component {\n  clockInterval = setInterval(() => {\n    const { timeTaken } = this.state;\n    this.setState({\n      timeTaken: timeTaken + 1,\n    });\n  }, 1000);;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      in_lobby: true,\n      game_over: false,\n      bitmap: '',\n      num_players: 0,\n      current_player: -1,\n      player_names: [],\n      player_times: [],\n      player_scores: [],\n      last_percentage: [],\n      moves: [],\n      timeTaken: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.socket = openSocket('http://localhost:10000');\n    this.socket.on('to_client', (data) => {\n      const {\n        in_lobby, moves, num_players, player_scores, percentages,\n      } = this.state;\n      const gameState = JSON.parse(data);\n      if (gameState.reset) {\n        this.resetBoard();\n      } else if (in_lobby) {\n        this.init(gameState.player_names);\n      } else if (gameState['soft-reset']) {\n        this.softReset();\n      } else if (gameState.game_over) {\n        this.endGame();\n      } else {\n        const nMoves = [...moves];\n        if (nMoves.length === 0) {\n          for (let i = 0; i < num_players; i += 1) {\n            nMoves.push([]);\n          }\n        }\n        const currentTurn = parseInt(gameState.current_player, 10);\n        nMoves[currentTurn - 1].push([gameState.move_col, gameState.move_row]);\n\n        // calculate scores for current round of current game\n        const nPercentages = [];\n        let totalRoundScore = 0;\n        player_scores.forEach((singleScore) => {\n          totalRoundScore += parseInt(singleScore, 10);\n        });\n        player_scores.forEach((score) => {\n          const percentageRoundScore = (100 * parseInt(score, 10) / totalRoundScore).toFixed(1);\n          nPercentages.push(percentageRoundScore);\n        });\n\n        this.setState({\n          percentages: nPercentages,\n          last_percentage: percentages,\n          current_player: gameState.current_player,\n          player_scores: gameState.player_scores,\n          player_times: gameState.player_times,\n          bitmap: gameState.bitmap,\n          moves: nMoves,\n          timeTaken: 0,\n        });\n      }\n    });\n  }\n\n  resetBoard() {\n    this.setState({\n      in_lobby: true,\n      last_percentage: [],\n      bitmap: '',\n      moves: [],\n      game_over: false,\n    });\n  }\n\n  softReset() {\n    this.setState({\n      moves: [],\n      bitmap: '',\n      game_over: false,\n    });\n  }\n\n  endGame() {\n    this.setState({\n      moves: [],\n      bitmap: '',\n      game_over: true,\n      timeTaken: 0,\n    });\n  }\n\n  init(names) {\n    const pScores = [];\n    const pTimes = [];\n    const lScores = [];\n    const percent = [];\n    for (let i = 0; i < names.length; i += 1) {\n      pScores.push(0);\n      pTimes.push(120.0);\n      lScores.push(0);\n      percent.push(0);\n    }\n    this.setState({\n      player_names: names,\n      player_scores: pScores,\n      player_times: pTimes,\n      num_players: names.length,\n      last_percentage: lScores,\n      in_lobby: false,\n      percentages: percent,\n      timeTaken: 0,\n    });\n  }\n\n  render() {\n    const {\n      game_over,\n      player_names,\n      player_scores,\n      player_times,\n      last_percentage,\n      current_player,\n      percentages,\n      timeTaken,\n      bitmap,\n      moves,\n    } = this.state;\n    return (\n      <div>\n        <Typography variant=\"h2\" gutterBottom style={{ textAlign: 'center' }}>\n          Gravitational Voronoi\n        </Typography>\n        <Grid container spacing={32}>\n          <Grid item xs={2} />\n          {\n            game_over ? (\n              <Grid item xs={8}>\n                <Gameover\n                  player_names={player_names}\n                  total_scores={player_scores}\n                />\n              </Grid>\n            ) : (\n              <Grid item xs={8}>\n                <Sidebar\n                  player_names={player_names}\n                  player_scores={player_scores}\n                  player_times={player_times}\n                  last_percentage={last_percentage}\n                  current_player={current_player}\n                  percentages={percentages}\n                />\n                <br />\n                <Timer timer={timeTaken} />\n              </Grid>\n            )\n          }\n          <Grid item xs={2} />\n          <Grid item xs={12}>\n            <Board\n              bitmap={bitmap}\n              moves={moves}\n            />\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/* eslint: browser */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}